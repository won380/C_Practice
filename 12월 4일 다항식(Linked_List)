#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#include <stdlib.h>

/*

* Coefficient : 계수

* Exponent : 지수(제곱, 승)

*/

#define COMPARE(x,y) (((x) < (y)) ? -1 : ((x) == (y)) ? 0 : 1)

#define RIGHT_BIG -1

#define LEFT_BIG 1

#define EQUAL 0

typedef struct poly* polyPointer;//구조체

typedef struct poly {

	int exp;

	int coef;

	polyPointer link;//포인터

} POLY;

void add_node(polyPointer* poly, polyPointer* rear, int coef, int exp);

void show_poly(polyPointer poly);

polyPointer padd(polyPointer a, polyPointer b);

void attach(int coefficient, int exponent, polyPointer* rear);

void add_node(polyPointer* poly, polyPointer* rear, int coef, int exp) {
	
	polyPointer new_node = (polyPointer)malloc(sizeof(POLY));
	new_node->coef = coef; new_node->exp = exp;

	new_node->link = NULL;

	if (*rear == NULL) {

		*poly = new_node;

		*rear = new_node;

		return;

	}

	(*rear)->link = new_node;

	*rear = new_node;

}

void show_poly(polyPointer poly) {

	polyPointer p = poly;

	while (p) {

		printf("%c%dx^%d", p != poly ? p->coef >= 0 ? '+' : '-' : ' ', p->coef, p->exp);

		p = p->link;

	}

	printf("\n\n");

}

polyPointer padd(polyPointer a, polyPointer b) {

	polyPointer front, rear, temp;

	int sum = 0;

	rear = (polyPointer)malloc(sizeof(POLY));

	front = rear;

	while (a && b) {

		switch (COMPARE(a->exp, b->exp)) {

		case RIGHT_BIG:

			attach(b->coef, b->exp, &rear);

			b = b->link;

			break;

		case EQUAL:

			sum = a->coef + b->coef;

			if (sum) attach(sum, a->exp, &rear);

			a = a->link; b = b->link;

			break;

		case LEFT_BIG:

			attach(a->coef, a->exp, &rear);

			a = a->link;

			break;

		}

	}

	for (; a; a = a->link) attach(a->coef, a->exp, &rear);

	for (; b; b = b->link) attach(b->coef, b->exp, &rear);

	rear->link = NULL;

	temp = front; front = front->link; free(temp);

	return front;

}

void attach(int coefficient, int exponent, polyPointer* rear) {

	polyPointer temp;

	temp = (polyPointer)malloc(sizeof(POLY));

	temp->coef = coefficient;

	temp->exp = exponent;

	(*rear)->link = temp;

	*rear = temp;

}

void main() {

	polyPointer a, b;

	polyPointer a_rear = NULL, b_rear = NULL;

	add_node(&a, &a_rear, -3, 6);

	add_node(&a, &a_rear, 2, 5);

	add_node(&a, &a_rear, 3, 2);

	add_node(&b, &b_rear, -2, 5);

	show_poly(padd(a, b));

}

